{"version":3,"sources":["components/Header.js","components/EditTaskForm.js","components/TaskModal.js","components/Task.js","components/AddTaskForm.js","components/Column.js","components/AddColumnForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","EditTaskForm","updateTask","e","preventDefault","props","columns","columnKey","taskKey","updateColumn","task","tasks","updatedTask","currentTarget","name","value","updatedColumn","this","style","marginBottom","autoFocus","type","onChange","placeholder","title","description","React","Component","TaskModal","deleteTask","column","handleKeyDown","keyCode","selectTask","onKeyDown","onClick","Task","selectedTaskKey","data-tkey","data-ckey","draggable","onDragStart","target","dataTransfer","setData","dataset","tkey","ckey","onDragOver","onDrop","tKeyDrag","getData","cKeyDrag","tKeyDrop","cKeyDrop","rect","getBoundingClientRect","y","clientY","top","h","height","tasksKeys","Object","keys","spliceIndex","indexOf","tasksKeysBef","splice","updatedTasks","forEach","key","columnPrev","AddTaskForm","titleRef","createRef","createTask","current","Date","now","updateColumns","reset","selectColumn","onSubmit","required","ref","Column","deleteColumn","selectedColumnKey","tKey","cKeyPrev","cKeyNext","columnNext","console","log","map","width","AddColumnForm","nameRef","createColumn","addColumn","toggleAddCol","App","state","isAddCol","initColumns","v","i","setState","length","localStorageRef","localStorage","getItem","JSON","parse","script","document","createElement","src","async","body","appendChild","setItem","stringify","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f8bb7fa4.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <div className=\"navbar\">\n            <h1>Kanban Board</h1>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react'\n\nclass EditTaskForm extends React.Component {\n    // Tasks#Update: onChange\n    updateTask = (e) => {\n        // skip refresh\n        e.preventDefault();\n        // create the updated task\n        const { columns, columnKey, taskKey, updateColumn } = this.props;\n        const task = columns[columnKey].tasks[taskKey];\n\n        const updatedTask = {\n            ...task,\n            [e.currentTarget.name]: e.currentTarget.value\n        }\n        // update the column\n        const updatedColumn = columns[columnKey];\n        updatedColumn.tasks[taskKey] = updatedTask;\n        updateColumn(columnKey, updatedColumn);\n    }\n\n    render() {\n        const { columns, columnKey, taskKey } = this.props;\n        const task = columns[columnKey].tasks[taskKey];\n\n        return (\n            <form>\n                <h2 style={{marginBottom: \"1rem\"}}>Edit Task</h2>\n                <input\n                    autoFocus\n                    type=\"text\"\n                    onChange={this.updateTask}\n                    name=\"title\"\n                    placeholder=\"Enter title\"\n                    value={task.title}\n                />\n                <input\n                    type=\"text\" name=\"description\"\n                    onChange={this.updateTask}\n                    placeholder=\"Enter description\"\n                    value={task.description}\n                />\n            </form>\n        )\n    }\n}\n\nexport default EditTaskForm;\n","import React, { Component } from 'react'\nimport EditTaskForm from './EditTaskForm';\n\n\nclass TaskModal extends Component {\n    // Tasks#destroy: onClick\n    deleteTask = (taskKey) => {\n        const column = this.props.columns[this.props.columnKey];\n        delete column.tasks[taskKey]\n        this.props.updateColumn(this.props.columnKey, column);\n    }\n\n    // Close Modal if Enter or Esacpe key is pressed\n    handleKeyDown = (e) => {\n        if (e.keyCode === 13 || e.keyCode === 27) {\n            this.props.selectTask(this.props.columnKey, null);\n        }\n    }\n\n    render() {\n        const { columns, selectTask, columnKey, taskKey, updateColumn } = this.props;\n\n        return (\n            <div className=\"modal-wrapper\">\n                <div className=\"modal\" onKeyDown={this.handleKeyDown}>\n                    <button className=\"modal-close\" onClick={() => selectTask(columnKey, null)}>✖</button>\n                    {/* implement inline edit */}\n                    <EditTaskForm\n                        columns={columns}\n                        columnKey={columnKey}\n                        taskKey={taskKey}\n                        updateColumn={updateColumn}\n                    />\n                    <button className=\"sq-btn\" onClick={() => this.deleteTask(taskKey)}>🗑</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TaskModal;\n","import React, { Component } from 'react';\nimport TaskModal from './TaskModal';\n\n\nclass Task extends Component {\n  render() {\n      const { columns, selectTask, selectedTaskKey, columnKey, taskKey, updateColumn } = this.props;\n      const task = columns[columnKey].tasks[taskKey];\n\n      const dragStart = e => {\n        const target = e.target;\n        e.dataTransfer.setData('tkey', target.dataset.tkey);\n        e.dataTransfer.setData('ckey', target.dataset.ckey);\n      }\n      const dragOver = e => {\n        e.preventDefault();\n      }\n      const drop = e => {\n        e.preventDefault();\n\n        const tKeyDrag = e.dataTransfer.getData('tKey');\n        const cKeyDrag = e.dataTransfer.getData('cKey');\n        const tKeyDrop = e.currentTarget.dataset.tkey;\n        const cKeyDrop = e.currentTarget.dataset.ckey;\n\n        // find mouse position of drop\n        const rect = e.currentTarget.getBoundingClientRect();\n        const y = e.clientY - rect.top;\n        const h = rect.height;\n\n        // Extract the tasks keys to an Array\n        const tasksKeys = Object.keys(columns[cKeyDrop].tasks);\n        \n        // split array based on where the mouse is when drop\n        const dropBefore = (y / h) < 0.5;\n\n        const spliceIndex = dropBefore \n          ? tasksKeys.indexOf(tKeyDrop)\n          : tasksKeys.indexOf(tKeyDrop) + 1;\n\n        // split array of keys into two\n        const tasksKeysBef = tasksKeys.splice(0, spliceIndex);\n\n        // set new containers\n        const updatedColumn = columns[cKeyDrop];\n        const updatedTasks = {};\n        \n        // rebuilt the tasks object\n        // before\n        tasksKeysBef.forEach(key => {\n          updatedTasks[key] = updatedColumn.tasks[key]\n        })\n        // insert\n        updatedTasks[tKeyDrag] = columns[cKeyDrag].tasks[tKeyDrag];\n        // after\n        tasksKeys.forEach((key) => {\n          updatedTasks[key] = updatedColumn.tasks[key];\n        });\n\n        // update the variable and update the column\n        updatedColumn.tasks = updatedTasks;\n        updateColumn(cKeyDrop, updatedColumn);\n\n        // delete task from prev column\n        if (cKeyDrag !== cKeyDrop) {\n          const columnPrev = columns[cKeyDrag];\n          delete columnPrev.tasks[tKeyDrag];\n          updateColumn(cKeyDrag, columnPrev);\n        }\n      };\n\n      return (\n        <div \n          className=\"task-card\"\n          data-tkey={taskKey}\n          data-ckey={columnKey}\n          draggable={this.props.draggable}\n          onDragStart={dragStart}\n          onDragOver={dragOver}\n          onDrop={drop}\n        >\n          {/* only title is rendered */}\n          <button className=\"task\" onClick={() => selectTask(columnKey, taskKey)}>\n            <h3>{task.title}</h3>\n            <span className=\"icon-btn\">🖋</span>\n          </button>\n          {/* render popup if that task is selected */}\n          {selectedTaskKey === taskKey ? (\n            <TaskModal\n              columns={columns}\n              columnKey={columnKey}\n              taskKey={taskKey}\n              selectTask={selectTask}\n              updateColumn={updateColumn}\n            />\n          ) : (\n            <div />\n          )}\n        </div>\n      );\n  }\n}\n\nexport default Task;\n","import React from \"react\";\n\nclass AddTaskForm extends React.Component {\n  // create reference needed for the form\n  titleRef = React.createRef();\n  // descriptionRef = React.createRef();\n\n  // Tasks#create: in response to submit\n  createTask = (e) => {\n    // prevent refresh\n    e.preventDefault();\n    // create the task using the input value\n    const task = {\n      title: this.titleRef.current.value,\n      // description: this.descriptionRef.current.value,\n    };\n    // update the columns\n    const updatedColumn = this.props.columns[this.props.columnKey];\n    updatedColumn.tasks[`task${Date.now()}`] = task;\n    this.props.updateColumns(this.props.columnKey, updatedColumn);\n    // clear the form\n    e.currentTarget.reset();\n    // clear the selectColumn to close the form\n    this.props.selectColumn(null);\n  };\n\n  render() {\n    return (\n      <form className=\"add-task-form\" onSubmit={this.createTask}>\n        <input\n          autoFocus\n          required\n          ref={this.titleRef}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Enter task title...\"\n        />\n        {/* <input\n          ref={this.descriptionRef}\n          type=\"text\"\n          name=\"description\"\n          placeholder=\"Enter description\"\n        /> */}\n        <button type=\"submit\">Add Task</button>\n        <button onClick={() => this.props.selectColumn(null)}>✖</button>\n      </form>\n    );\n  }\n}\n\nexport default AddTaskForm;\n","import React, { Component } from 'react';\nimport Task from './Task';\nimport AddTaskForm from './AddTaskForm';\n\n\nexport class Column extends Component {\n    render() {\n        const { columns, columnKey, updateColumn, deleteColumn, selectColumn, selectedColumnKey, selectTask, selectedTaskKey } = this.props;\n        const drop = e => {\n          e.preventDefault();\n          const tKey = e.dataTransfer.getData('tKey');\n          const cKeyPrev = e.dataTransfer.getData('cKey');\n          const cKeyNext = e.currentTarget.dataset.ckey;\n          \n          if (cKeyPrev !== cKeyNext) {\n            // add task to next column\n            const columnNext = columns[cKeyNext];\n            const task = columns[cKeyPrev].tasks[tKey];\n            columnNext.tasks[tKey] = task;\n            updateColumn(cKeyNext, columnNext);\n            console.log(columnNext);\n\n            // delete task from prev column\n            const columnPrev = columns[cKeyPrev];\n            delete columnPrev.tasks[tKey];\n            updateColumn(cKeyPrev, columnPrev);\n          } \n        };\n        const dragOver = e => {\n          e.preventDefault();\n        };\n\n        return (\n          <div className=\"column-card\">\n            <div\n              className=\"column-header\"\n              data-ckey={columnKey}\n              onDragOver={dragOver}\n              onDrop={drop}\n            >\n              <h2>{columns[columnKey].name}</h2>\n              <button\n                className=\"sq-btn display-hover\"\n                onClick={() => deleteColumn(columnKey)}\n              >\n                🗑\n              </button>\n            </div>\n            {Object.keys(columns[columnKey].tasks).map((key) => {\n              return (\n                <Task\n                  key={key}\n                  columns={columns}\n                  columnKey={columnKey}\n                  taskKey={key}\n                  updateColumn={updateColumn}\n                  selectTask={selectTask}\n                  selectedTaskKey={selectedTaskKey}\n                  draggable=\"true\"\n                />\n              );\n            })}\n            {/* Add Task Button */}\n            {selectedColumnKey === columnKey ? (\n              <AddTaskForm\n                columns={columns}\n                columnKey={columnKey}\n                updateColumns={updateColumn}\n                selectColumn={selectColumn}\n              />\n            ) : (\n              <button\n                className=\"add-btn\"\n                style={{ width: \"100%\" }}\n                onClick={() => {\n                  selectColumn(columnKey);\n                }}\n              >\n                + Add a Task\n              </button>\n            )}\n          </div>\n        );\n    }\n}\n\nexport default Column;\n","import React from 'react'\n\nclass AddColumnForm extends React.Component {\n    nameRef = React.createRef();\n\n    createColumn = (e) => {\n        // prevent refresh from form submit\n        e.preventDefault();\n        // create new column\n        const column = {\n            name: this.nameRef.current.value,\n            tasks: {}\n        }\n        // add the column\n        this.props.addColumn(column);\n        // form reset\n        e.currentTarget.reset();\n        // close the form\n        this.props.toggleAddCol();\n    }\n\n    render() {\n        return (\n            <form className=\"add-column-form\" onSubmit={this.createColumn} >\n                <input autoFocus required ref={this.nameRef} type=\"text\" name=\"name\" placeholder=\"Enter column name...\" />\n                <button type=\"submit\">Add Column</button>\n                <button onClick={this.props.toggleAddCol}>✖</button>\n            </form>\n        )\n    }\n}\n\nexport default AddColumnForm;\n","import React from 'react';\nimport Header from './Header'\nimport Column from './Column';\nimport AddColumnForm from './AddColumnForm';\n\nclass App extends React.Component {\n  state = {\n    columns: {},\n    isAddCol: false,\n    selectedColumnKey: null,\n    selectedTaskKey: null\n  }\n\n  // initialize basic columns\n  componentDidMount() {\n    // initialize new board\n    if (Object.keys(this.state.columns).length === 0) {\n      this.initColumns();\n    }\n\n    // retrive data from localStorage\n    const localStorageRef = localStorage.getItem(\"kanban\");\n    if (localStorageRef) {\n      this.setState({ columns: JSON.parse(localStorageRef) });\n    }\n\n    // hook up to iconify\n    const script = document.createElement(\"script\");\n    script.src = \"https://code.iconify.design/1/1.0.7/iconify.min.js\";\n    script.async = true;\n    document.body.appendChild(script);\n  }\n\n  componentDidUpdate() {\n    // store data when there are updates\n    localStorage.setItem(\n      \"kanban\",\n      JSON.stringify(this.state.columns)\n    )\n  }\n\n  // initialize board\n  initColumns = () => {\n    const colName = [\"Todo\", \"In progress\", \"Done\"];\n    const columns = {}\n    colName.forEach((v, i) => {\n      columns[`column${i}`] = { name: v, tasks: {} };\n    })\n\n    this.setState({ columns });\n  }\n\n  //selectColumn\n  selectColumn = (columnKey) => {\n    const column = this.state.columns[columnKey]\n    if (column) {\n      this.setState({ selectedColumnKey: columnKey });\n    } else {\n      this.setState({ selectedColumnKey: null });\n    }\n  }\n\n  // selectTask\n  selectTask = (columnKey, taskKey) => {\n    const task = this.state.columns[columnKey].tasks[taskKey];\n    const selectedTaskKey = task ? taskKey : null;\n    this.setState({ selectedTaskKey })\n  }\n\n  // Column CRUD\n  addColumn = (column) => {\n    const columns = { ...this.state.columns };\n    columns[`column${Date.now()}`] = column;\n    this.setState({ columns });\n  }\n\n  updateColumn = (columnKey, updatedColumn) => {\n    const columns = { ...this.state.columns };\n    columns[columnKey] = updatedColumn;\n    this.setState({ columns });\n  }\n\n  deleteColumn = (columnKey) => {\n    const columns = { ...this.state.columns };\n    delete columns[columnKey];\n    this.setState({ columns });\n  }\n\n  // update the isAddCol flag\n  toggleAddCol = () => {\n    this.setState({ isAddCol: !this.state.isAddCol });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"columns\">\n          {Object.keys(this.state.columns).map(key => (\n            <Column\n              key={key}\n              columnKey={key}\n              columns={this.state.columns}\n              selectedColumnKey={this.state.selectedColumnKey}\n              selectedTaskKey={this.state.selectedTaskKey}\n              selectColumn={this.selectColumn}\n              selectTask={this.selectTask}\n              updateColumn={this.updateColumn}\n              deleteColumn={this.deleteColumn}\n            />\n          ))}\n\n          {(this.state.isAddCol) ? (\n            <AddColumnForm\n              toggleAddCol={this.toggleAddCol}\n              addColumn={this.addColumn}\n            />) : (\n            <button \n              className=\"add-btn\" \n              onClick={this.toggleAddCol}\n              style={{marginLeft: \"0.5rem\"}}\n              >+ Add Another Column</button>)\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// scss\nimport './scss/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}